#!/usr/bin/env bash

function update_wallpapers {
  wallpaper_repo="${HOME}/Pictures/desktop-wallpapers/"
  # Update the wallpaper directory repo
  cd "${wallpaper_repo}" && git pull
}

function generate_theme {
  ## Wallpaper album ##
  wallpaper_directory="${wallpaper_repo}/wallpapers/"
  ## Window Background Transparency ##
  window_transparency=70

  # Prompt user for photo selection, if no then a random photo is choosen from the $wallpaper_directory
  if zenity --question \
    --title="Theme Generator" \
    --text="Choose wallpaper?\nNo for random." \
    --no-wrap;
  then
    photo=$(zenity --file-selection);
  else
    photo=${wallpaper_directory};
  fi
  # Prompt user if they want to use the new theme,
  # Loops until user selects 'yes'
  while true; do
    (
    echo "# Generating theme..." ; sleep 1
    # Clear out current color-scheme cache
    wal -c;
    # Use Pywal (wal) to generate theme colors and set desktop wallpaper
    # -a sets window transparency
    # -i path to photo used for color generation
    # --iterative used if choosing a random wallpaper, this will select the next wallpaper rather than a random one each time
    wal -a ${window_transparency} -i "${photo}" --iterative;
        ) |
      zenity --progress \
        --title="Generate Theme" \
        --pulsate \
        --auto-close;

    if zenity --question \
      --text="Would you like to use this theme?" \
      --no-wrap;
    then
      break;
    fi
  done
}

function apply_theme {
  ## Current Directory ##
  DIR=$(dirname "$0")
  ## Theme Name ##
  theme_name="custom-theme"
  ## Lock Screen ##
  lock_screen="/usr/share/backgrounds/lock-screen.jpg"
  ## GTK-3 theme directory ##
  gtk3_themes_directory="/usr/share/gtksourceview-3.0/styles/"
  ## Directory & files generated by Pywal for color scheme ##
  wal_cache_dir="$HOME/.cache/wal"
  ## Oomox's theme/icon changing scripts ##
  oomox_theme_script="/opt/oomox/plugins/theme_arc/arc-theme/change_color.sh"
  oomox_icons_script="/opt/oomox/plugins/icons_papirus/change_color.sh"
  ## Script that updates any JetBrains IDE color scheme to match Pywal color gen ##
  intellij_script="$HOME/.scripts/intellijPywal/launch.sh"
  # Source the shell script generated by Pywal
  . "${wal_cache_dir}/colors.sh"

  # GUI pop-up prompts
  (
  echo "# Getting things ready..." ; sleep 4 # Sleep for [default: 4] seconds to emulate a working process
  gksu "${DIR}/permissions.sh" \
    "${wal_cache_dir}/${theme_name}.xml" \
    "${gtk3_themes_directory}" \
    "${wallpaper}" \
    "${lock_screen}"
  echo "# Updating theme..." ; sleep 1
  # Use Oomox to update WM theme (widgets, windows, etc)
  "${oomox_theme_script}" -o "${theme_name}" "${wal_cache_dir}/colors-oomox"
  echo "# Updating icons..." ; sleep 1
  # Use Oomax to update system icons: mainly directory icons
  "${oomox_icons_script}" -o "${theme_name}" "${wal_cache_dir}/colors-oomox"
  echo "# Updating JetBrains color-scheme..." ; sleep 4
  # Execute IntelliJPywal script to update Jetbrains' IDE themes
  "${intellij_script}"
  echo "# Applying theme..." ; sleep 5
  ) |
  zenity --progress \
      --title="Generate Theme" \
      --pulsate \
      --time-remaining \
      --auto-kill \
      --auto-close
}

function update_remote {
  ## Remost host name ##
  remote_host="macos"
  # Prompt to update remote host's theme using the same wallpaper
  # DISCLAIMER: To be able to run this script W/O the use of a terminal, ssh-keygen pair must be
  #             established to prevent password prompt for connection.
  if zenity --question \
      --text="Complete! Would you also like to update \"${remote_host}\" using this theme?" \
      --no-wrap;
  then
      # Use IFS to split the wallpaper path by the '/' delimeter into an array variable
      # Retrieve the last index of the array (name of the wallpaper)
      IFS='/' read -r -a  path_to_wallpaper <<< "${wallpaper}";
      wallpaper=${path_to_wallpaper[-1]};

      # Alias 'update-theme' is located on remote machine which executes themeGen/launch.sh
      # This prevents the need to establish which shell, or executeable paths we need for the remote-host,
      # we echo two commands
      #      1. Using the remote alias to update the theme passing the name of the wallpaper
      #      2. Terminate connection to the remote-host
      # Echoing the commands enables terminal interaction without the need to specifiy executable paths
      # -tt is used to force a psuedo-terminal during the session to allow the use of stdin with shh
      echo "update-theme ${wallpaper}; exit;" | ssh -tt ${remote_host};
  fi
}

function restart_logout {
  # Prompt user if they would like to restart their session
  # GTK3 themes will NOT be applied until AFTER new session
  if zenity --question \
      --text="Complete! Changes won't take full effect until your next session.\nWould you like to logout now?" \
      --no-wrap
  then
      # End session and logout
      i3exit logout
  else
      # Reload i3 to initiate most changes
      i3-msg restart
  fi
}